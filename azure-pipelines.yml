trigger:
  branches:
    include:
      - main

variables:
  TF_VERSION: '1.6.0'
  TF_WORKING_DIR: '$(System.DefaultWorkingDirectory)'
  AWS_REGION: 'us-east-2'

stages:

# ===== CI Stage =====
- stage: Build
  displayName: "Terraform Build & Publish Artifact"
  jobs:
  - job: TerraformBuild
    pool:
      vmImage: 'ubuntu-latest'
    variables:
      - group: aws-credentials         # AWS keys
      - group: azure-ssh-credentials   # AZURE_SSH_PUB_KEY
      - group: azure-credentials       # AZURE_SUBSCRIPTION_ID + AZURE_TENANT_ID
    steps:
      - checkout: self
        clean: true

      # Fix AWS provider permissions
      - script: |
          cd $(TF_WORKING_DIR)
          chmod +x .terraform/providers/registry.terraform.io/hashicorp/aws/*/linux_amd64/terraform-provider-aws* || true
        displayName: "Fix AWS provider permissions"

      # Install Terraform
      - task: TerraformInstaller@1
        inputs:
          terraformVersion: '$(TF_VERSION)'

      # Authenticate Azure (OIDC)
      - task: AzureCLI@2
        inputs:
          azureSubscription: 'azure-spn'   # must match service connection name
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            echo "Azure OIDC authenticated"

      # Terraform Init & Validate
      - script: |
          cd $(TF_WORKING_DIR)
          terraform init
          terraform validate
        displayName: "Terraform Init & Validate"
        env:
          AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
          AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)

      # Terraform Plan
      - script: |
          cd $(TF_WORKING_DIR)
          terraform plan \
            -var "azure_ssh_pub_key=$(AZURE_SSH_PUB_KEY)" \
            -var "azure_subscription_id=$(AZURE_SUBSCRIPTION_ID)" \
            -var "azure_tenant_id=$(AZURE_TENANT_ID)" \
            -out=tfplan
        displayName: "Terraform Plan"
        env:
          AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
          AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)

      # Publish Terraform artifact
      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: '$(TF_WORKING_DIR)'
          artifact: 'terraform-iac'
          publishLocation: 'pipeline'

# ===== CD Stage =====
- stage: Deploy
  displayName: "Terraform Apply (AWS + Azure)"
  dependsOn: Build
  jobs:
  - job: TerraformApply
    pool:
      vmImage: 'ubuntu-latest'
    variables:
      - group: aws-credentials
      - group: azure-ssh-credentials
      - group: azure-credentials
    steps:
      - download: current
        artifact: terraform-iac

      # Fix AWS provider permissions
      - script: |
          cd $(Pipeline.Workspace)/terraform-iac
          chmod +x .terraform/providers/registry.terraform.io/hashicorp/aws/*/linux_amd64/terraform-provider-aws* || true
        displayName: "Fix AWS provider permissions"

      # Install Terraform
      - task: TerraformInstaller@1
        inputs:
          terraformVersion: '$(TF_VERSION)'

      # Authenticate Azure (OIDC)
      - task: AzureCLI@2
        inputs:
          azureSubscription: 'azure-spn'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            echo "Azure OIDC authenticated"

      # Terraform Apply using plan
      - script: |
          cd $(Pipeline.Workspace)/terraform-iac
          terraform init
          terraform apply \
            -var "azure_ssh_pub_key=$(AZURE_SSH_PUB_KEY)" \
            -var "azure_subscription_id=$(AZURE_SUBSCRIPTION_ID)" \
            -var "azure_tenant_id=$(AZURE_TENANT_ID)" \
            -auto-approve tfplan
        displayName: "Terraform Apply"
        env:
          AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
          AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)

      # Export Terraform outputs
      - script: |
          cd $(Pipeline.Workspace)/terraform-iac
          terraform output -json > terraform-outputs.json
        displayName: "Export Terraform Outputs"

      # Publish outputs
      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: '$(Pipeline.Workspace)/terraform-iac/terraform-outputs.json'
          artifact: 'TerraformOutputs'
          publishLocation: 'pipeline'
